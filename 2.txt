Hi Pranav,

Thank you so much for the kind words and recognition. I truly appreciate the support and collaboration from the entire team, which has been instrumental in overcoming challenges and moving the CIR Experian API integration forward.

Looking forward to continuing our progress together and successfully achieving the upcoming milestones.

Thanks & Regards,
Pandurang Darkunde




public static Map<String, FintechCapsDaysSummary> processEnquiriesByRank(
    List<Enqrhist> enquiries, 
    Map<String, String> userMapping,
    LocalDate reportDate) {

    Map<String, FintechCapsDaysSummary> rankSummaries = new HashMap<>();
    rankSummaries.put("A", new FintechCapsDaysSummary());
    rankSummaries.put("B", new FintechCapsDaysSummary());
    rankSummaries.put("C", new FintechCapsDaysSummary());
    rankSummaries.put("D", new FintechCapsDaysSummary());

    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("ddMMyyyy");

    // Structure: Rank -> Fintech ID -> Unique Enquiry Dates
    Map<String, Map<String, Set<LocalDate>>> rankFintechDatesMap = new HashMap<>();

    for (Enqrhist enquiry : enquiries) {
        if (enquiry == null || enquiry.getEnquiryPurposeCd() == null || 
            !enquiry.getEnquiryPurposeCd().trim().equalsIgnoreCase(SOFT_PULL_PURPOSE_CODE)) {
            continue;
        }

        try {
            String fintechId = enquiry.getSegmentCode();
            LocalDate enquiryDate = LocalDate.parse(enquiry.getEnquiryDate(), dateFormatter);
            if (enquiryDate.isAfter(reportDate)) continue;

            String rank = userMapping != null ? userMapping.getOrDefault(fintechId, "D") : "D";

            // Initialize data structure
            rankFintechDatesMap.putIfAbsent(rank, new HashMap<>());
            rankFintechDatesMap.get(rank).putIfAbsent(fintechId, new HashSet<>());

            // Add the enquiry date (Set deduplicates same-day entries)
            rankFintechDatesMap.get(rank).get(fintechId).add(enquiryDate);
        } catch (DateTimeParseException e) {
            continue;
        }
    }

    // Calculate counts for each period
    for (Map.Entry<String, Map<String, Set<LocalDate>>> rankEntry : rankFintechDatesMap.entrySet()) {
        String rank = rankEntry.getKey();
        Map<String, Set<LocalDate>> fintechDates = rankEntry.getValue();

        int count30 = 0;
        int count60 = 0;
        int count90 = 0;
        int count180 = 0;

        for (Set<LocalDate> dates : fintechDates.values()) {
            for (LocalDate date : dates) {
                long daysBetween = ChronoUnit.DAYS.between(date, reportDate);
                if (daysBetween <= 30) count30++;
                if (daysBetween <= 60) count60++;
                if (daysBetween <= 90) count90++;
                if (daysBetween <= 180) count180++;
            }
        }

        FintechCapsDaysSummary summary = rankSummaries.get(rank);
        summary.setcAPSLast30Days(count30);
        summary.setcAPSLast60Days(count60);
        summary.setcAPSLast90Days(count90);
        summary.setcAPSLast180Days(count180);
    }

    return rankSummaries;
}

-------------------------------------------
public static Map<String, FintechCapsDaysSummary> processEnquiriesByRank(
    List<Enqrhist> enquiries, 
    Map<String, String> userMapping,
    LocalDate reportDate) {

    Map<String, FintechCapsDaysSummary> rankSummaries = new HashMap<>();
    rankSummaries.put("A", new FintechCapsDaysSummary());
    rankSummaries.put("B", new FintechCapsDaysSummary());
    rankSummaries.put("C", new FintechCapsDaysSummary());
    rankSummaries.put("D", new FintechCapsDaysSummary());

    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("ddMMyyyy");

    // Structure: Rank -> Fintech ID -> Unique Month-Years of enquiries
    Map<String, Map<String, Set<YearMonth>>> rankFintechMonthsMap = new HashMap<>();

    for (Enqrhist enquiry : enquiries) {
        if (enquiry == null || enquiry.getEnquiryPurposeCd() == null || 
            !enquiry.getEnquiryPurposeCd().trim().equalsIgnoreCase(SOFT_PULL_PURPOSE_CODE)) {
            continue;
        }

        try {
            String fintechId = enquiry.getSegmentCode();
            LocalDate enquiryDate = LocalDate.parse(enquiry.getEnquiryDate(), dateFormatter);
            YearMonth enquiryMonth = YearMonth.from(enquiryDate); // Group by month-year
            
            if (enquiryDate.isAfter(reportDate)) continue;

            String rank = userMapping != null ? userMapping.getOrDefault(fintechId, "D") : "D";

            // Initialize data structure
            rankFintechMonthsMap.putIfAbsent(rank, new HashMap<>());
            rankFintechMonthsMap.get(rank).putIfAbsent(fintechId, new HashSet<>());

            // Add the month-year (automatically deduplicates same month)
            rankFintechMonthsMap.get(rank).get(fintechId).add(enquiryMonth);
        } catch (DateTimeParseException e) {
            continue;
        }
    }

    // Calculate counts for each period
    for (Map.Entry<String, Map<String, Set<YearMonth>>> rankEntry : rankFintechMonthsMap.entrySet()) {
        String rank = rankEntry.getKey();
        Map<String, Set<YearMonth>> fintechMonths = rankEntry.getValue();

        int count30 = 0;
        int count60 = 0;
        int count90 = 0;
        int count180 = 0;

        YearMonth reportYearMonth = YearMonth.from(reportDate);
        
        for (Set<YearMonth> months : fintechMonths.values()) {
            for (YearMonth month : months) {
                long monthsBetween = ChronoUnit.MONTHS.between(month, reportYearMonth);
                
                // Check if ANY day in the month falls within the period
                boolean isIn30Days = month.isAfter(reportYearMonth.minusMonths(1)) || 
                                    month.equals(reportYearMonth.minusMonths(1));
                boolean isIn60Days = month.isAfter(reportYearMonth.minusMonths(2)) || 
                                    month.equals(reportYearMonth.minusMonths(2));
                // Similar for 90/180 days...

                if (isIn30Days) count30++;
                if (isIn60Days) count60++;
                // Add checks for 90/180 days as needed
            }
        }

        FintechCapsDaysSummary summary = rankSummaries.get(rank);
        summary.setcAPSLast30Days(count30);
        summary.setcAPSLast60Days(count60);
        summary.setcAPSLast90Days(count90);
        summary.setcAPSLast180Days(count180);
    }

    return rankSummaries;
}
----------------------------------------------
public static Map<String, FintechCapsDaysSummary> processEnquiriesByRank(
    List<Enqrhist> enquiries, 
    Map<String, String> userMapping,
    LocalDate reportDate) {

    Map<String, FintechCapsDaysSummary> rankSummaries = new HashMap<>();
    rankSummaries.put("A", new FintechCapsDaysSummary());
    rankSummaries.put("B", new FintechCapsDaysSummary());
    rankSummaries.put("C", new FintechCapsDaysSummary());
    rankSummaries.put("D", new FintechCapsDaysSummary());

    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("ddMMyyyy");

    // Calculate strict cutoffs (day-level precision)
    LocalDate cutoff30Days = reportDate.minusDays(30);
    LocalDate cutoff60Days = reportDate.minusDays(60);
    LocalDate cutoff90Days = reportDate.minusDays(90);
    LocalDate cutoff180Days = reportDate.minusDays(180);

    // Structure: Rank -> Fintech ID -> Unique YearMonths (for deduplication)
    Map<String, Map<String, Set<YearMonth>>> rankFintechMonths = new HashMap<>();

    for (Enqrhist enquiry : enquiries) {
        if (enquiry == null || enquiry.getEnquiryPurposeCd() == null || 
            !enquiry.getEnquiryPurposeCd().trim().equalsIgnoreCase(SOFT_PULL_PURPOSE_CODE)) {
            continue;
        }

        try {
            String fintechId = enquiry.getSegmentCode();
            LocalDate enquiryDate = LocalDate.parse(enquiry.getEnquiryDate(), dateFormatter);
            YearMonth enquiryYearMonth = YearMonth.from(enquiryDate);

            if (enquiryDate.isAfter(reportDate)) continue;

            String rank = userMapping != null ? userMapping.getOrDefault(fintechId, "D") : "D";

            // Initialize data structures
            rankFintechMonths.putIfAbsent(rank, new HashMap<>());
            rankFintechMonths.get(rank).putIfAbsent(fintechId, new HashSet<>());

            // Add YearMonth (deduplicates same month)
            rankFintechMonths.get(rank).get(fintechId).add(enquiryYearMonth);
        } catch (DateTimeParseException e) {
            continue;
        }
    }

    // Calculate counts for each period
    for (String rank : rankFintechMonths.keySet()) {
        Map<String, Set<YearMonth>> fintechMonths = rankFintechMonths.get(rank);
        FintechCapsDaysSummary summary = rankSummaries.get(rank);

        int count30 = 0;
        int count60 = 0;
        int count90 = 0;
        int count180 = 0;

        for (Set<YearMonth> yearMonths : fintechMonths.values()) {
            for (YearMonth yearMonth : yearMonths) {
                // Get the LAST day of the month to check cutoff (worst-case scenario)
                LocalDate lastDayOfMonth = yearMonth.atEndOfMonth();

                if (!lastDayOfMonth.isBefore(cutoff30Days)) count30++;
                if (!lastDayOfMonth.isBefore(cutoff60Days)) count60++;
                if (!lastDayOfMonth.isBefore(cutoff90Days)) count90++;
                if (!lastDayOfMonth.isBefore(cutoff180Days)) count180++;
            }
        }

        summary.setcAPSLast30Days(count30);
        summary.setcAPSLast60Days(count60);
        summary.setcAPSLast90Days(count90);
        summary.setcAPSLast180Days(count180);
    }

    return rankSummaries;
}
