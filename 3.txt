package com.experian.ngtocbv2.output.mapper;

import com.experian.inprofile.nextgen.pojo.output.Enqrhist;
import com.experian.inprofile.nextgen.pojo.output.ResponseInfo;
import com.experian.inprofile.pojo.input.INProfileRequest;
import com.experian.inprofile.pojo.output.FintechCapsDaysSummary;
import com.experian.inprofile.pojo.output.FintechNonCreditCapsSummary;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;


import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;


// only for soft pull
// soft pull purpose code 19 <EnquiryPurposeCd>16 </EnquiryPurposeCd>
// <EnquiryReason>5</EnquiryReason> ccm request
//<InqBureauMemberId>3427</InqBureauMemberId>  ng response


public class FintechCapsMapper {

    private static final String SOFT_PULL_PURPOSE_CODE = "19";

    public FintechNonCreditCapsSummary getFintechRanks(ResponseInfo reponseInfo, INProfileRequest inProfileRequest) {
        FintechNonCreditCapsSummary fintechNonCreditCapsSummary = new FintechNonCreditCapsSummary();

        if (reponseInfo.getConsumerResponse() == null || reponseInfo.getConsumerResponse().getNGINQUIRY() == null) {
            return fintechNonCreditCapsSummary;
        }

        String bMId = reponseInfo.getConsumerResponse().getNGINQUIRY().getInqBureauMemberId();
        String enqReason = inProfileRequest.getApplication().getEnquiryReason();
        String userKey = bMId + "_" + enqReason;
        Map<String, FintechCapsDaysSummary> rankSummaries = new HashMap<>();
        Map<String, String> userMapping = readFile(userKey);
        if (userMapping != null && reponseInfo.getConsumerResponse().getENQRHIST() != null) {
            rankSummaries = processEnquiriesByRank(
                    reponseInfo.getConsumerResponse().getENQRHIST(),
                    userMapping, LocalDate.now()
            );
            }

        fintechNonCreditCapsSummary.setRankA(rankSummaries.getOrDefault("A", new FintechCapsDaysSummary()));
        fintechNonCreditCapsSummary.setRankB(rankSummaries.getOrDefault("B", new FintechCapsDaysSummary()));
        fintechNonCreditCapsSummary.setRankC(rankSummaries.getOrDefault("C", new FintechCapsDaysSummary()));
        fintechNonCreditCapsSummary.setRankD(rankSummaries.getOrDefault("D", new FintechCapsDaysSummary()));

        return fintechNonCreditCapsSummary;
    }

    public static Map<String, FintechCapsDaysSummary> processEnquiriesByRank(
            List<Enqrhist> enquiries,
            Map<String, String> userMapping,
            LocalDate reportDate) {

        // Initialize result structure for all ranks
        Map<String, FintechCapsDaysSummary> rankSummaries = new HashMap<>();
        Arrays.asList("A", "B", "C", "D").forEach(rank ->
                rankSummaries.put(rank, new FintechCapsDaysSummary()));

        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("ddMMyyyy");

        // Calculate strict day-based cutoffs
        LocalDate cutoff30Days = reportDate.minusDays(30);
        LocalDate cutoff60Days = reportDate.minusDays(60);
        LocalDate cutoff90Days = reportDate.minusDays(90);
        LocalDate cutoff180Days = reportDate.minusDays(180);

        // Structure: Rank -> Fintech ID -> Period -> Valid YearMonths
        Map<String, Map<String, Map<String, Set<YearMonth>>>> periodData = new HashMap<>();

        // Process each enquiry
        for (Enqrhist enquiry : enquiries) {
            if (enquiry == null || enquiry.getEnquiryPurposeCd() == null ||
                    !enquiry.getEnquiryPurposeCd().trim().equalsIgnoreCase(SOFT_PULL_PURPOSE_CODE)) {
                continue;
            }

            try {
                String iUserID = enquiry.getInsertUserId();
                LocalDate enquiryDate = LocalDate.parse(enquiry.getEnquiryDate(), dateFormatter);
                System.out.println(enquiryDate +" "+ iUserID);
                YearMonth enquiryYearMonth = YearMonth.from(enquiryDate);

                if (enquiryDate.isAfter(reportDate)) continue;

                String rank = userMapping != null ? userMapping.getOrDefault(iUserID, "D") : "D";

                // Initialize data structures
                periodData.putIfAbsent(rank, new HashMap<>());
                periodData.get(rank).putIfAbsent(iUserID, new HashMap<>());

                Map<String, Set<YearMonth>> enquiryPeriods = periodData.get(rank).get(iUserID);

                // Check each period and add to appropriate sets
                if (!enquiryDate.isBefore(cutoff30Days)) {
                    enquiryPeriods.computeIfAbsent("30Days", k -> new HashSet<>()).add(enquiryYearMonth);
                }
                if (!enquiryDate.isBefore(cutoff60Days)) {
                    enquiryPeriods.computeIfAbsent("60Days", k -> new HashSet<>()).add(enquiryYearMonth);
                }
                if (!enquiryDate.isBefore(cutoff90Days)) {
                    enquiryPeriods.computeIfAbsent("90Days", k -> new HashSet<>()).add(enquiryYearMonth);
                }
                if (!enquiryDate.isBefore(cutoff180Days)) {
                    enquiryPeriods.computeIfAbsent("180Days", k -> new HashSet<>()).add(enquiryYearMonth);
                }

            } catch (DateTimeParseException e) {
                continue; // Skip invalid dates
            }
        }
        System.out.println("map---> " + periodData);

        // Calculate final counts
        for (String rank : periodData.keySet()) {
            FintechCapsDaysSummary summary = rankSummaries.get(rank);

            summary.setcAPSLast30Days(countValidMonths(periodData, rank, "30Days"));
            summary.setcAPSLast60Days(countValidMonths(periodData, rank, "60Days"));
            summary.setcAPSLast90Days(countValidMonths(periodData, rank, "90Days"));
            summary.setcAPSLast180Days(countValidMonths(periodData, rank, "180Days"));
        }

        return rankSummaries;
    }

    private static int countValidMonths(
            Map<String, Map<String, Map<String, Set<YearMonth>>>> periodData,
            String rank, String period) {

        return periodData.getOrDefault(rank, Collections.emptyMap())
                .values().stream()
                .map(enquiryPeriods -> enquiryPeriods.getOrDefault(period, Collections.emptySet()).size())
                .mapToInt(Integer::intValue)
                .sum();
    }

    public Map<String, String> readFile(String userKey) {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            Map<String, Map<String, String>> outerMap = objectMapper.readValue(
                    new File(System.getenv("EXP_ROOT") + "/ccm/resources/fintech/fintechUserMapping.json"),
                    new TypeReference<Map<String, Map<String, String>>>() {}
            );
            return outerMap.get(userKey);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
}
