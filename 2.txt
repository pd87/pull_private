public static Map<String, FintechCapsDaysSummary> processEnquiriesByRank(
    List<Enqrhist> enquiries, 
    Map<String, String> userMapping,
    LocalDate reportDate) {

    Map<String, FintechCapsDaysSummary> rankSummaries = new HashMap<>();
    rankSummaries.put("A", new FintechCapsDaysSummary());
    rankSummaries.put("B", new FintechCapsDaysSummary());
    rankSummaries.put("C", new FintechCapsDaysSummary());
    rankSummaries.put("D", new FintechCapsDaysSummary());

    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("ddMMyyyy");

    // Structure: Rank -> Fintech ID -> Unique Enquiry Dates
    Map<String, Map<String, Set<LocalDate>>> rankFintechDatesMap = new HashMap<>();

    for (Enqrhist enquiry : enquiries) {
        if (enquiry == null || enquiry.getEnquiryPurposeCd() == null || 
            !enquiry.getEnquiryPurposeCd().trim().equalsIgnoreCase(SOFT_PULL_PURPOSE_CODE)) {
            continue;
        }

        try {
            String fintechId = enquiry.getSegmentCode();
            LocalDate enquiryDate = LocalDate.parse(enquiry.getEnquiryDate(), dateFormatter);
            if (enquiryDate.isAfter(reportDate)) continue;

            String rank = userMapping != null ? userMapping.getOrDefault(fintechId, "D") : "D";

            // Initialize data structure
            rankFintechDatesMap.putIfAbsent(rank, new HashMap<>());
            rankFintechDatesMap.get(rank).putIfAbsent(fintechId, new HashSet<>());

            // Add the enquiry date (Set deduplicates same-day entries)
            rankFintechDatesMap.get(rank).get(fintechId).add(enquiryDate);
        } catch (DateTimeParseException e) {
            continue;
        }
    }

    // Calculate counts for each period
    for (Map.Entry<String, Map<String, Set<LocalDate>>> rankEntry : rankFintechDatesMap.entrySet()) {
        String rank = rankEntry.getKey();
        Map<String, Set<LocalDate>> fintechDates = rankEntry.getValue();

        int count30 = 0;
        int count60 = 0;
        int count90 = 0;
        int count180 = 0;

        for (Set<LocalDate> dates : fintechDates.values()) {
            for (LocalDate date : dates) {
                long daysBetween = ChronoUnit.DAYS.between(date, reportDate);
                if (daysBetween <= 30) count30++;
                if (daysBetween <= 60) count60++;
                if (daysBetween <= 90) count90++;
                if (daysBetween <= 180) count180++;
            }
        }

        FintechCapsDaysSummary summary = rankSummaries.get(rank);
        summary.setcAPSLast30Days(count30);
        summary.setcAPSLast60Days(count60);
        summary.setcAPSLast90Days(count90);
        summary.setcAPSLast180Days(count180);
    }

    return rankSummaries;
}

-------------------------------------------
public static Map<String, FintechCapsDaysSummary> processEnquiriesByRank(
    List<Enqrhist> enquiries, 
    Map<String, String> userMapping,
    LocalDate reportDate) {

    Map<String, FintechCapsDaysSummary> rankSummaries = new HashMap<>();
    rankSummaries.put("A", new FintechCapsDaysSummary());
    rankSummaries.put("B", new FintechCapsDaysSummary());
    rankSummaries.put("C", new FintechCapsDaysSummary());
    rankSummaries.put("D", new FintechCapsDaysSummary());

    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("ddMMyyyy");

    // Structure: Rank -> Fintech ID -> Unique Month-Years of enquiries
    Map<String, Map<String, Set<YearMonth>>> rankFintechMonthsMap = new HashMap<>();

    for (Enqrhist enquiry : enquiries) {
        if (enquiry == null || enquiry.getEnquiryPurposeCd() == null || 
            !enquiry.getEnquiryPurposeCd().trim().equalsIgnoreCase(SOFT_PULL_PURPOSE_CODE)) {
            continue;
        }

        try {
            String fintechId = enquiry.getSegmentCode();
            LocalDate enquiryDate = LocalDate.parse(enquiry.getEnquiryDate(), dateFormatter);
            YearMonth enquiryMonth = YearMonth.from(enquiryDate); // Group by month-year
            
            if (enquiryDate.isAfter(reportDate)) continue;

            String rank = userMapping != null ? userMapping.getOrDefault(fintechId, "D") : "D";

            // Initialize data structure
            rankFintechMonthsMap.putIfAbsent(rank, new HashMap<>());
            rankFintechMonthsMap.get(rank).putIfAbsent(fintechId, new HashSet<>());

            // Add the month-year (automatically deduplicates same month)
            rankFintechMonthsMap.get(rank).get(fintechId).add(enquiryMonth);
        } catch (DateTimeParseException e) {
            continue;
        }
    }

    // Calculate counts for each period
    for (Map.Entry<String, Map<String, Set<YearMonth>>> rankEntry : rankFintechMonthsMap.entrySet()) {
        String rank = rankEntry.getKey();
        Map<String, Set<YearMonth>> fintechMonths = rankEntry.getValue();

        int count30 = 0;
        int count60 = 0;
        int count90 = 0;
        int count180 = 0;

        YearMonth reportYearMonth = YearMonth.from(reportDate);
        
        for (Set<YearMonth> months : fintechMonths.values()) {
            for (YearMonth month : months) {
                long monthsBetween = ChronoUnit.MONTHS.between(month, reportYearMonth);
                
                // Check if ANY day in the month falls within the period
                boolean isIn30Days = month.isAfter(reportYearMonth.minusMonths(1)) || 
                                    month.equals(reportYearMonth.minusMonths(1));
                boolean isIn60Days = month.isAfter(reportYearMonth.minusMonths(2)) || 
                                    month.equals(reportYearMonth.minusMonths(2));
                // Similar for 90/180 days...

                if (isIn30Days) count30++;
                if (isIn60Days) count60++;
                // Add checks for 90/180 days as needed
            }
        }

        FintechCapsDaysSummary summary = rankSummaries.get(rank);
        summary.setcAPSLast30Days(count30);
        summary.setcAPSLast60Days(count60);
        summary.setcAPSLast90Days(count90);
        summary.setcAPSLast180Days(count180);
    }

    return rankSummaries;
}
----------------------------------------------
public static Map<String, FintechCapsDaysSummary> processEnquiriesByRank(
    List<Enqrhist> enquiries, 
    Map<String, String> userMapping,
    LocalDate reportDate) {

    Map<String, FintechCapsDaysSummary> rankSummaries = new HashMap<>();
    // Initialize ranks A-D...

    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("ddMMyyyy");

    // Structure: Rank -> Fintech ID -> (YearMonth -> Earliest enquiry date in that month)
    Map<String, Map<String, Map<YearMonth, LocalDate>>> rankFintechMonthDates = new HashMap<>();

    // Step 1: Group by Rank -> Fintech -> YearMonth (keep earliest date per month)
    for (Enqrhist enquiry : enquiries) {
        if (enquiry == null || !SOFT_PULL_PURPOSE_CODE.equalsIgnoreCase(enquiry.getEnquiryPurposeCd().trim())) {
            continue;
        }

        try {
            String fintechId = enquiry.getSegmentCode();
            LocalDate enquiryDate = LocalDate.parse(enquiry.getEnquiryDate(), dateFormatter);
            YearMonth enquiryMonth = YearMonth.from(enquiryDate);
            String rank = userMapping != null ? userMapping.getOrDefault(fintechId, "D") : "D";

            rankFintechMonthDates.putIfAbsent(rank, new HashMap<>());
            rankFintechMonthDates.get(rank).putIfAbsent(fintechId, new HashMap<>());

            // Keep the earliest date for each month (to check day-level inclusion later)
            rankFintechMonthDates.get(rank).get(fintechId).merge(
                enquiryMonth, 
                enquiryDate, 
                (existingDate, newDate) -> newDate.isBefore(existingDate) ? newDate : existingDate
            );
        } catch (DateTimeParseException e) {
            continue;
        }
    }

    // Step 2: Calculate counts for each period
    for (String rank : rankFintechMonthDates.keySet()) {
        Map<String, Map<YearMonth, LocalDate>> fintechMonthDates = rankFintechMonthDates.get(rank);
        FintechCapsDaysSummary summary = rankSummaries.get(rank);

        int count30 = 0;
        int count60 = 0;
        int count90 = 0;
        int count180 = 0;

        for (Map<YearMonth, LocalDate> monthDates : fintechMonthDates.values()) {
            for (Map.Entry<YearMonth, LocalDate> entry : monthDates.entrySet()) {
                LocalDate earliestDateInMonth = entry.getValue();
                long daysBetween = ChronoUnit.DAYS.between(earliestDateInMonth, reportDate);

                if (daysBetween <= 30) count30++;
                if (daysBetween <= 60) count60++;
                if (daysBetween <= 90) count90++;
                if (daysBetween <= 180) count180++;
            }
        }

        summary.setcAPSLast30Days(count30);
        summary.setcAPSLast60Days(count60);
        summary.setcAPSLast90Days(count90);
        summary.setcAPSLast180Days(count180);
    }

    return rankSummaries;
}
